
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)
#define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
   do \
      { \
      /* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
      *yy_cp = (yy_hold_char); \
      YY_RESTORE_YY_MORE_OFFSET \
      (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
      YY_DO_BEFORE_ACTION; /* set up yytext again */ \
      } \
   while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{
   /* %if-c-only */
   FILE *yy_input_file;
   /* %endif */

   /* %if-c++-only */
   /* %endif */

   char *yy_ch_buf;     /* input buffer */
   char *yy_buf_pos;    /* current position in input buffer */

   /* Size of input buffer in bytes, not including room for EOB
    * characters.
    */
   int yy_buf_size;

   /* Number of characters read into yy_ch_buf, not including EOB
    * characters.
    */
   int yy_n_chars;

   /* Whether we "own" the buffer - i.e., we know we created it,
    * and can realloc() it to grow it, and should free() it to
    * delete it.
    */
   int yy_is_our_buffer;

   /* Whether this is an "interactive" input source; if so, and
    * if we're using stdio for input, then we want to use getc()
    * instead of fread(), to make sure we stop fetching input after
    * each newline.
    */
   int yy_is_interactive;

   /* Whether we're considered to be at the beginning of a line.
    * If so, '^' rules will be active on the next match, otherwise
    * not.
    */
   int yy_at_bol;

   int yy_bs_lineno; /**< The line count. */
   int yy_bs_column; /**< The column count. */

   /* Whether to try to fill the input buffer when we reach the
    * end of it.
    */
   int yy_fill_buffer;

   int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
   /* When an EOF's been seen but there's still some text to process
    * then we mark the buffer as YY_EOF_PENDING, to indicate that we
    * shouldn't try reading from the input source any more.  We might
    * still have a bunch of tokens to match, though, because of
    * possible backing-up.
    *
    * When we actually see the EOF, we change the status to "new"
    * (via yyrestart()), so that the user can continue scanning by
    * just pointing yyin at a new input file.
    */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;     /* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;    /* whether we need to initialize */
static int yy_start = 0;   /* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
   { \
   if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
      YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
   } \
   YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
   }
#define yy_set_bol(at_bol) \
   { \
   if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
      YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
   } \
   YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
   }
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
   (yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
   yyleng = (int) (yy_cp - yy_bp); \
   (yy_hold_char) = *yy_cp; \
   *yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
   (yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
   flex_int32_t yy_verify;
   flex_int32_t yy_nxt;
};
static const flex_int16_t yy_acclist[515] =
{
   0,
   1,    5,    1,    5,  102,  100,  101,    1,  100,  101,
   5,  101,   97,  100,  101,  100,  101,    4,  100,  101,
   86,  100,  101,   93,  100,  101,   83,  100,  101,   78,
   100,  101,   79,  100,  101,   73,  100,  101,   71,  100,
   101,   82,  100,  101,   72,  100,  101,   85,  100,  101,
   74,  100,  101,   64,  100,  101,   84,  100,  101,   69,
   100,  101,   70,  100,  101,   68,  100,  101,   96,  100,
   101,   67,  100,  101,   67,  100,  101,   67,  100,  101,
   67,  100,  101,   67,  100,  101,   67,  100,  101,   67,
   100,  101,   67,  100,  101,   67,  100,  101,   80,  100,

   101,  100,  101,   81,  100,  101,   94,  100,  101,   67,
   100,  101,   67,  100,  101,   67,  100,  101,   67,  100,
   101,   67,  100,  101,   67,  100,  101,   67,  100,  101,
   67,  100,  101,   67,  100,  101,   67,  100,  101,   67,
   100,  101,   67,  100,  101,   67,  100,  101,   67,  100,
   101,   67,  100,  101,   76,  100,  101,   95,  100,  101,
   77,  100,  101,   87,  100,  101,  100,  101,    1,    5,
   92,   16,   58,   49,   60,   75,   56,   98,   54,   99,
   55,   65,   57,   65,   64,   88,   90,   53,   91,   89,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,

   67,   67,   67,    2,   59,   67,    6,   67,   67,   52,
   67,   67,   67,   51,   67,   50,   67,   67,   67,   67,
   67,   67,   18,   67,   67,   20,   67,   67,   48,   67,
   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   61,   48,   16,    3,   17,   65,   65,
   65,   65,   62,   63,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   49,   67,   67,
   52,   67,    7,   67,   23,   67,   51,   67,   50,   67,
   67,   19,   67,   67,   67,   67,   67,   67,   26,   67,
   67,   67,   67,   67,   67,   67,   27,   67,   67,   67,

   67,   67,   67,   67,   67,   67,   24,   22,   65,   65,
   65,   65,   67,   67,   67,   67,   67,   67,   67,   29,
   67,   67,   67,   66,   67,   67,   67,   67,   67,    8,
   67,   24,   67,   67,   67,   67,   11,   67,   67,   67,
   67,   67,   67,   13,   67,   67,   67,   67,   67,   67,
   67,   65,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   41,   67,   67,   67,
   21,   67,   67,   67,   14,   67,   67,   67,   67,   47,
   67,   67,   28,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,    9,   67,   67,   67,   10,

   67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   67,   67,   67,   67,   15,   67,   67,
   42,   67,   67,   67,   67,   40,   67,   67,   67,   67,
   33,   67,   67,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   43,   67,   67,   67,   67,   67,   67,   67,
   67,   67,   67,   12,   67,   67,   67,   67,   25,   67,
   67,   36,   67,   67,   67,   67,   67,   67,   67,   67,
   46,   67,   67,   67,   37,   67,   67,   67,   67,   67,
   32,   67,   67,   67,   67,   45,   67,   67,   67,   39,
   67,   67,   67,   67,   67,   30,   67,   34,   67,   38,

   67,   67,   67,   44,   67,   31,   67,   67,   67,   67,
   67,   67,   35,   67
} ;

static const flex_int16_t yy_accept[374] =
{
   0,
   1,    3,    5,    6,    8,   11,   13,   16,   18,   21,
   24,   27,   30,   33,   36,   39,   42,   45,   48,   51,
   54,   57,   60,   63,   66,   69,   72,   75,   78,   81,
   84,   87,   90,   93,   96,   99,  102,  104,  107,  110,
   113,  116,  119,  122,  125,  128,  131,  134,  137,  140,
   143,  146,  149,  152,  155,  158,  161,  164,  167,  169,
   170,  171,  172,  172,  173,  173,  174,  175,  176,  176,
   176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
   186,  186,  187,  188,  189,  190,  191,  192,  193,  194,
   195,  196,  197,  198,  199,  200,  201,  202,  203,  204,

   205,  206,  207,  209,  210,  212,  213,  214,  216,  218,
   219,  220,  221,  222,  223,  225,  226,  228,  229,  231,
   232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
   242,  243,  244,  245,  246,  246,  246,  247,  248,  249,
   249,  250,  251,  251,  252,  252,  253,  254,  255,  256,
   257,  258,  259,  260,  261,  262,  263,  264,  265,  266,
   267,  268,  270,  271,  273,  275,  277,  279,  281,  282,
   284,  285,  286,  287,  288,  289,  291,  292,  293,  294,
   295,  296,  297,  299,  300,  301,  302,  303,  304,  305,
   306,  307,  308,  309,  309,  310,  310,  311,  311,  312,

   313,  314,  315,  316,  317,  318,  319,  320,  322,  323,
   324,  326,  327,  328,  329,  330,  332,  334,  335,  336,
   337,  339,  340,  341,  342,  343,  344,  346,  347,  348,
   349,  350,  351,  352,  352,  353,  354,  355,  356,  357,
   358,  359,  360,  361,  362,  363,  364,  365,  366,  367,
   369,  370,  371,  373,  374,  375,  377,  378,  379,  380,
   382,  383,  385,  386,  387,  388,  389,  390,  391,  392,
   393,  394,  395,  396,  398,  399,  400,  402,  403,  404,
   405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
   415,  416,  417,  418,  420,  421,  423,  424,  425,  426,

   428,  429,  430,  431,  433,  434,  435,  436,  437,  438,
   439,  440,  441,  442,  443,  445,  446,  447,  448,  449,
   450,  451,  452,  453,  454,  456,  457,  458,  459,  461,
   462,  464,  465,  466,  467,  468,  469,  470,  471,  473,
   474,  475,  477,  478,  479,  480,  481,  483,  484,  485,
   486,  488,  489,  490,  492,  493,  494,  495,  496,  498,
   500,  502,  503,  504,  506,  508,  509,  510,  511,  512,
   513,  515,  515
} ;

static const YY_CHAR yy_ec[256] =
{
   0,
   1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
   2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
   11,   12,   13,   14,   15,   16,   17,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   19,    1,   20,
   21,   22,   23,    1,   24,   25,   26,   27,   28,   29,
   24,   30,   24,   24,   24,   31,   32,   24,   24,   24,
   24,   24,   33,   34,   35,   36,   24,   24,   24,   24,
   37,   38,   39,   40,   24,    1,   41,   42,   43,   44,

   45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
   55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
   24,   24,   65,   66,   67,   68,    1,    1,    1,    1,
   1,    1,   69,    1,   70,   71,    1,    1,   72,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,   73,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1
} ;

static const YY_CHAR yy_meta[74] =
{
   0,
   1,    1,    1,    1,    1,    1,    1,    1,    2,    1,
   1,    1,    1,    1,    1,    1,    1,    3,    1,    1,
   1,    1,    1,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
   3,    3,    3,    3,    1,    1,    1,    1,    1,    1,
   1,    1,    1
} ;

static const flex_int16_t yy_base[376] =
{
   0,
   0,    0,  461,  462,  458,  456,  437,   69,  462,  436,
   67,  418,  462,  462,   64,   65,  462,   62,  437,  433,
   63,  462,   69,  432,   71,  462,    0,  397,   35,  387,
   53,  405,   37,  395,  403,  462,  444,  462,  425,   42,
   400,   54,   57,  386,  398,   51,  394,  383,   48,  379,
   75,   76,   66,  394,  462,   89,  462,  462,   54,  436,
   434,  462,  114,  431,  432,  462,  462,  462,  113,  124,
   462,  462,  462,  462,  462,  462,  111,  462,  116,  120,
   117,  413,  462,  462,  462,  412,    0,  378,  369,  372,
   373,  376,  373,  372,  366,  365,   88,  374,  379,  462,

   462,  377,    0,  366,  113,  373,  358,  115,  119,  365,
   358,  360,  373,  349,    0,  356,  357,  351,    0,  354,
   359,  352,  365,  351,  344,  344,  340,  354,  348,  339,
   105,  354,  462,  462,  327,  327,  462,  462,  462,  167,
   462,  158,  175,  462,  377,  163,  462,  462,  335,  344,
   343,  333,  331,  340,  345,  339,  326,  344,  339,  323,
   322,    0,  338,  124,    0,    0,  146,  152,  321,    0,
   326,  334,  336,  321,  330,    0,  314,  319,  322,  327,
   323,  308,    0,  323,  314,  304,  307,  310,  322,  317,
   314,  462,  462,  342,  189,  183,  462,  341,  190,  462,

   298,  314,  313,  310,  309,  293,  292,    0,  322,  298,
   0,  120,  294,  300,  302,    0,    0,  298,  287,  286,
   0,  283,  297,  283,  295,  281,    0,  293,  292,  295,
   276,  280,  288,  314,  198,  290,  285,  281,  269,  282,
   277,  264,  295,  278,  265,  263,  267,  274,  258,    0,
   274,  267,    0,  261,  260,    0,  265,  256,  264,    0,
   256,    0,  257,  249,  279,  251,  251,  243,  239,  241,
   272,  259,  255,    0,  238,  245,    0,  236,  250,  239,
   241,  232,  246,  241,  237,  234,  244,  232,  253,  243,
   222,  224,  223,    0,  239,    0,  235,  219,  232,    0,

   216,  220,  229,  240,  212,  228,  225,  211,  214,  216,
   211,  205,  206,  218,    0,  237,  207,  207,  203,  209,
   197,  196,  204,  205,    0,  193,  201,  190,    0,  217,
   0,  195,  198,  183,  188,  186,  201,  172,    0,  173,
   176,    0,  174,  183,  171,  169,    0,  178,  173,  176,
   0,  154,  168,    0,  148,  141,  144,  143,    0,    0,
   0,  129,  117,    0,    0,  137,  111,  118,  100,   96,
   0,  462,  250,  253,  125
} ;

static const flex_int16_t yy_def[376] =
{
   0,
   372,    1,  372,  372,  372,  372,  372,  373,  372,  372,
   372,  374,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  372,  372,  372,  372,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  372,  372,  372,  372,  372,  372,
   372,  372,  373,  372,  373,  372,  372,  372,  374,  374,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  372,

   372,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  372,  372,  372,  372,  372,  372,  372,  372,  372,

   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  372,  372,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,

   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,  375,  375,  375,  375,  375,  375,  375,  375,  375,
   375,    0,  372,  372,  372
} ;

static const flex_int16_t yy_nxt[536] =
{
   0,
   4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
   14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
   24,   25,   26,   27,   27,   28,   29,   30,   31,   27,
   27,   32,   27,   33,   34,   35,   36,   37,   38,   39,
   40,   41,   27,   42,   27,   43,   44,   45,   46,   27,
   27,   47,   27,   27,   48,   49,   50,   51,   52,   53,
   27,   27,   54,   27,   55,   56,   57,   58,    4,    4,
   4,    4,   59,   64,   67,   71,   75,   73,   79,   89,
   80,   96,   76,   90,   72,   74,  105,   68,   82,   83,
   81,   85,   86,   92,   97,  102,  115,  110,  106,  120,

   103,   93,  121,  116,  117,  122,   65,   81,  107,  133,
   130,  111,  108,   94,  112,  124,  127,  109,  137,  125,
   128,  139,  126,  131,  135,  136,  372,   87,   77,  145,
   129,  145,   69,  142,  146,   79,  158,   80,  140,  141,
   371,  141,  370,  143,  144,  188,  144,   81,  159,  244,
   70,   65,  245,  189,  134,  140,  141,  164,  369,  167,
   143,  144,  141,  168,   81,  190,  368,  144,  164,  367,
   366,  164,  164,  167,  167,  142,  365,  168,  168,  194,
   146,  194,  164,  164,  195,  196,  197,  198,  197,  198,
   167,  200,  199,  200,  364,  234,  168,  234,  363,  362,

   235,  361,  196,  197,  167,  167,  195,  199,  200,  197,
   168,  168,  360,  359,  200,  235,  358,  141,  144,  141,
   144,  357,  356,  355,  354,  353,  197,  352,  197,  351,
   350,  349,  348,  347,  141,  144,  346,  345,  344,  343,
   141,  144,  342,  197,  341,  340,  339,  338,  337,  197,
   63,   63,   63,   69,  336,   69,  335,  334,  333,  332,
   331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
   321,  320,  319,  318,  317,  316,  315,  314,  313,  312,
   311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
   301,  300,  299,  298,  297,  296,  295,  294,  293,  292,

   291,  290,  289,  288,  287,  286,  285,  284,  283,  282,
   281,  280,  279,  278,  277,  276,  275,  274,  273,  272,
   271,  270,  269,  268,  267,  266,  265,  264,  263,  262,
   261,  235,  260,  259,  258,  257,  256,  255,  254,  253,
   252,  251,  250,  166,  249,  248,  211,  247,  246,  243,
   242,  241,  240,  211,  239,  238,  237,  236,  199,  195,
   233,  211,  232,  231,  230,  229,  228,  227,  226,  225,
   224,  223,  222,  221,  220,  219,  218,  217,  216,  215,
   214,  213,  212,  211,  210,  209,  208,  207,  206,  205,
   204,  203,  202,  201,  146,  193,  192,  191,  187,  186,

   185,  184,  183,  182,  181,  180,  179,  178,  177,  176,
   175,  174,  173,  172,  171,  170,  169,  166,  165,  163,
   162,  161,  160,  157,  156,  155,  154,  153,  152,  151,
   150,  149,  148,  147,  372,  138,   61,   60,  132,  123,
   119,  118,  114,  113,  104,  101,  100,   99,   98,   95,
   91,   88,   84,   78,   77,   70,   66,   62,   61,   60,
   372,    3,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372
} ;

static const flex_int16_t yy_chk[536] =
{
   0,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
   1,    1,    1,    8,   11,   15,   18,   16,   21,   29,
   21,   33,   18,   29,   15,   16,   42,   11,   23,   23,
   21,   25,   25,   31,   33,   40,   46,   43,   42,   49,

   40,   31,   49,   46,   46,   49,    8,   21,   42,   56,
   53,   43,   42,   31,   43,   51,   52,   42,   63,   51,
   52,   69,   51,   53,   59,   59,   70,  375,   77,   81,
   52,   81,   70,   79,   81,   80,   97,   80,   77,   77,
   370,   77,  369,   79,   79,  131,   79,   80,   97,  212,
   69,   63,  212,  131,   56,   77,   77,  105,  368,  108,
   79,   79,   77,  109,   80,  131,  367,   79,  164,  366,
   363,  105,  105,  108,  108,  142,  362,  109,  109,  140,
   146,  140,  164,  164,  140,  142,  142,  143,  142,  143,
   167,  146,  143,  146,  358,  196,  168,  196,  357,  356,

   196,  355,  142,  142,  167,  167,  195,  199,  146,  142,
   168,  168,  353,  352,  146,  235,  350,  195,  199,  195,
   199,  349,  348,  346,  345,  344,  235,  343,  235,  341,
   340,  338,  337,  336,  195,  199,  335,  334,  333,  332,
   195,  199,  330,  235,  328,  327,  326,  324,  323,  235,
   373,  373,  373,  374,  322,  374,  321,  320,  319,  318,
   317,  316,  314,  313,  312,  311,  310,  309,  308,  307,
   306,  305,  304,  303,  302,  301,  299,  298,  297,  295,
   293,  292,  291,  290,  289,  288,  287,  286,  285,  284,
   283,  282,  281,  280,  279,  278,  276,  275,  273,  272,

   271,  270,  269,  268,  267,  266,  265,  264,  263,  261,
   259,  258,  257,  255,  254,  252,  251,  249,  248,  247,
   246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
   236,  234,  233,  232,  231,  230,  229,  228,  226,  225,
   224,  223,  222,  220,  219,  218,  215,  214,  213,  210,
   209,  207,  206,  205,  204,  203,  202,  201,  198,  194,
   191,  190,  189,  188,  187,  186,  185,  184,  182,  181,
   180,  179,  178,  177,  175,  174,  173,  172,  171,  169,
   163,  161,  160,  159,  158,  157,  156,  155,  154,  153,
   152,  151,  150,  149,  145,  136,  135,  132,  130,  129,

   128,  127,  126,  125,  124,  123,  122,  121,  120,  118,
   117,  116,  114,  113,  112,  111,  110,  107,  106,  104,
   102,   99,   98,   96,   95,   94,   93,   92,   91,   90,
   89,   88,   86,   82,   65,   64,   61,   60,   54,   50,
   48,   47,   45,   44,   41,   39,   37,   35,   34,   32,
   30,   28,   24,   20,   19,   12,   10,    7,    6,    5,
   3,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,

   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
   372,  372,  372,  372,  372
} ;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[101] =
{
   0,
   57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
   67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
   77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
   87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
   97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
   137,  138,  139,  140,  141,  142,  143,  144,  145,  146,
   147,  148,  149,  150,  151,  152,  153,  154,  155,  156

} ;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "xfl.ll"
/**INDENT-OFF**/
/* clang-format off */
// Copyright (c) 2010-2020, Lawrence Livermore National Security, LLC. Produced
// at the Lawrence Livermore National Laboratory. All Rights reserved. See files
// LICENSE and NOTICE for details. LLNL-CODE-806117.
//
// This file is part of the MFEM library. For more information and source code
// availability visit https://mfem.org.
//
// MFEM is free software; you can redistribute it and/or modify it under the
// terms of the BSD-3 license. We welcome feedback and contributions, see file
// CONTRIBUTING.md for details.

#include "xfl.hpp"
#include "xfl.Y.hpp"
#include "xfl_mid.hpp"

using token_t = yy::parser::token_kind_type;

static token_t update(xfl&);
static token_t new_line(xfl&);
static token_t line_token(xfl&, Node**, const char*);
static token_t line_comment(xfl&);
static token_t block_comment(xfl&);
static token_t spaces(xfl &ufl) { return update(ufl); }
static void llerror(xfl&, char const*);
static token_t token(xfl&, Node**, token_t TOK_TK, const char *TOK_STR,
                     const char *yytext, token_t = TOK::YYEMPTY);
#define _(TK) return token(ufl, yylval, TOK::TK, #TK, yytext, update(ufl));



#define INITIAL 0




#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif



#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif



/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */


int yylex_destroy ( void );



int yyget_debug ( void );



void yyset_debug ( int debug_flag  );



YY_EXTRA_TYPE yyget_extra ( void );



void yyset_extra ( YY_EXTRA_TYPE user_defined  );



FILE *yyget_in ( void );



void yyset_in  ( FILE * _in_str  );



FILE *yyget_out ( void );



void yyset_out  ( FILE * _out_str  );



			int yyget_leng ( void );



char *yyget_text ( void );



int yyget_lineno ( void );



void yyset_lineno ( int _line_number  );






/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT

#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif


/* %if-c-only */





/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif


/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif



/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif



/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif


/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif


/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif


/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */


/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */









extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */


/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif



/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif



/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION


/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;










	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif


        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );


		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */


	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 373 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 372 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];

find_rule: /* we branch to this label when backing up */


		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */


do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 101 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 101 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 102 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
case 1:
YY_RULE_SETUP
spaces(ufl);
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
new_line(ufl);
	YY_BREAK
case 3:
YY_RULE_SETUP
block_comment(ufl);
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return line_token(ufl, yylval, yytext); }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
_(NL)
	YY_BREAK
case 6:
YY_RULE_SETUP
_(AS)
	YY_BREAK
case 7:
YY_RULE_SETUP
_(DEF)
	YY_BREAK
case 8:
YY_RULE_SETUP
_(FROM)
	YY_BREAK
case 9:
YY_RULE_SETUP
_(IMPORT)
	YY_BREAK
case 10:
YY_RULE_SETUP
_(RETURN)
	YY_BREAK
case 11:
YY_RULE_SETUP
_(PLOT)
	YY_BREAK
case 12:
YY_RULE_SETUP
_(BENCHMARK)
	YY_BREAK
case 13:
YY_RULE_SETUP
_(SAVE)
	YY_BREAK
case 14:
YY_RULE_SETUP
_(SOLVE)
	YY_BREAK
case 15:
YY_RULE_SETUP
_(PROJECT)
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
_(STRING)
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
_(QUOTE)
	YY_BREAK
case 18:
YY_RULE_SETUP
_(IF)
	YY_BREAK
case 19:
YY_RULE_SETUP
_(FOR)
	YY_BREAK
case 20:
YY_RULE_SETUP
_(IN)
	YY_BREAK
case 21:
YY_RULE_SETUP
_(RANGE)
	YY_BREAK
case 22:
YY_RULE_SETUP
_(DOT_OP)
	YY_BREAK
case 23:
YY_RULE_SETUP
_(INNER_OP)
	YY_BREAK
case 24:
YY_RULE_SETUP
_(GRAD_OP)
	YY_BREAK
case 25:
YY_RULE_SETUP
_(TRANSPOSE_OP)
	YY_BREAK
case 26:
YY_RULE_SETUP
_(LHS)
	YY_BREAK
case 27:
YY_RULE_SETUP
_(RHS)
	YY_BREAK
case 28:
YY_RULE_SETUP
_(DEVICE)
	YY_BREAK
case 29:
YY_RULE_SETUP
_(MESH)
	YY_BREAK
case 30:
YY_RULE_SETUP
_(FINITE_ELEMENT)
	YY_BREAK
case 31:
YY_RULE_SETUP
_(UNIT_SQUARE_MESH)
	YY_BREAK
case 32:
YY_RULE_SETUP
_(UNIT_HEX_MESH)
	YY_BREAK
case 33:
YY_RULE_SETUP
_(FUNCTION)
	YY_BREAK
case 34:
YY_RULE_SETUP
_(FUNCTION_SPACE)
	YY_BREAK
case 35:
YY_RULE_SETUP
_(VECTOR_FUNCTION_SPACE)
	YY_BREAK
case 36:
YY_RULE_SETUP
_(EXPRESSION)
	YY_BREAK
case 37:
YY_RULE_SETUP
_(DIRICHLET_BC)
	YY_BREAK
case 38:
YY_RULE_SETUP
_(TRIAL_FUNCTION)
	YY_BREAK
case 39:
YY_RULE_SETUP
_(TEST_FUNCTION)
	YY_BREAK
case 40:
YY_RULE_SETUP
_(CONSTANT_API)
	YY_BREAK
case 41:
YY_RULE_SETUP
_(POINT)
	YY_BREAK
case 42:
YY_RULE_SETUP
_(SEGMENT)
	YY_BREAK
case 43:
YY_RULE_SETUP
_(TRIANGLE)
	YY_BREAK
case 44:
YY_RULE_SETUP
_(QUADRILATERAL)
	YY_BREAK
case 45:
YY_RULE_SETUP
_(TETRAHEDRON)
	YY_BREAK
case 46:
YY_RULE_SETUP
_(HEXAHEDRON)
	YY_BREAK
case 47:
YY_RULE_SETUP
_(WEDGE)
	YY_BREAK
case 48:
YY_RULE_SETUP
_(OR_OR)
	YY_BREAK
case 49:
YY_RULE_SETUP
_(AND_AND)
	YY_BREAK
case 50:
YY_RULE_SETUP
_(DOM_DX)
	YY_BREAK
case 51:
YY_RULE_SETUP
_(EXT_DS)
	YY_BREAK
case 52:
YY_RULE_SETUP
_(INT_DS)
	YY_BREAK
case 53:
YY_RULE_SETUP
_(EQ_EQ)
	YY_BREAK
case 54:
YY_RULE_SETUP
_(ADD_EQ)
	YY_BREAK
case 55:
YY_RULE_SETUP
_(SUB_EQ)
	YY_BREAK
case 56:
YY_RULE_SETUP
_(MUL_EQ)
	YY_BREAK
case 57:
YY_RULE_SETUP
_(DIV_EQ)
	YY_BREAK
case 58:
YY_RULE_SETUP
_(MOD_EQ)
	YY_BREAK
case 59:
YY_RULE_SETUP
_(XOR_EQ)
	YY_BREAK
case 60:
YY_RULE_SETUP
_(AND_EQ)
	YY_BREAK
case 61:
YY_RULE_SETUP
_(OR_EQ)
	YY_BREAK
case 62:
YY_RULE_SETUP
_(LEFT_EQ)
	YY_BREAK
case 63:
YY_RULE_SETUP
_(RIGHT_EQ)
	YY_BREAK
case 64:
YY_RULE_SETUP
_(NATURAL)
	YY_BREAK
case 65:
YY_RULE_SETUP
_(REAL)
	YY_BREAK
case 66:
YY_RULE_SETUP
_(BOOL)
	YY_BREAK
case 67:
YY_RULE_SETUP
_(IDENTIFIER)
	YY_BREAK
case 68:
YY_RULE_SETUP
_(GT)
	YY_BREAK
case 69:
YY_RULE_SETUP
_(LT)
	YY_BREAK
case 70:
YY_RULE_SETUP
_(EQ)
	YY_BREAK
case 71:
YY_RULE_SETUP
_(ADD)
	YY_BREAK
case 72:
YY_RULE_SETUP
_(SUB)
	YY_BREAK
case 73:
YY_RULE_SETUP
_(MUL)
	YY_BREAK
case 74:
YY_RULE_SETUP
_(DIV)
	YY_BREAK
case 75:
YY_RULE_SETUP
_(POW)
	YY_BREAK
case 76:
YY_RULE_SETUP
_(LS)
	YY_BREAK
case 77:
YY_RULE_SETUP
_(RS)
	YY_BREAK
case 78:
YY_RULE_SETUP
_(LP)
	YY_BREAK
case 79:
YY_RULE_SETUP
_(RP)
	YY_BREAK
case 80:
YY_RULE_SETUP
_(LB)
	YY_BREAK
case 81:
YY_RULE_SETUP
_(RB)
	YY_BREAK
case 82:
YY_RULE_SETUP
_(COMA)
	YY_BREAK
case 83:
YY_RULE_SETUP
_(APOSTROPHE)
	YY_BREAK
case 84:
YY_RULE_SETUP
_(COLON)
	YY_BREAK
case 85:
YY_RULE_SETUP
_(DOT)
	YY_BREAK
case 86:
YY_RULE_SETUP
_(MOD)
	YY_BREAK
case 87:
YY_RULE_SETUP
_(TILDE)
	YY_BREAK
case 88:
YY_RULE_SETUP
_(LEFT_SHIFT)
	YY_BREAK
case 89:
YY_RULE_SETUP
_(RIGHT_SHIFT)
	YY_BREAK
case 90:
YY_RULE_SETUP
_(LT_EQ)
	YY_BREAK
case 91:
YY_RULE_SETUP
_(GT_EQ)
	YY_BREAK
case 92:
YY_RULE_SETUP
_(NOT_EQ)
	YY_BREAK
case 93:
YY_RULE_SETUP
_(AND)
	YY_BREAK
case 94:
YY_RULE_SETUP
_(XOR)
	YY_BREAK
case 95:
YY_RULE_SETUP
_(OR)
	YY_BREAK
case 96:
YY_RULE_SETUP
_(QUESTION)
	YY_BREAK
case 97:
YY_RULE_SETUP
_(NOT)
	YY_BREAK
case 98:
YY_RULE_SETUP
_(INC_OP)
	YY_BREAK
case 99:
YY_RULE_SETUP
_(DEC_OP)
	YY_BREAK
case 100:
YY_RULE_SETUP
{ llerror(ufl, "unexpected token"); REJECT }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
return TOK::YYEOF;
	YY_BREAK
case 101:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */


/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}


/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;


	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 373 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 373 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 372);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}


#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;

	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}


/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}


/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;

	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */


        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;


/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */


/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */


/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;

	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );


		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */





/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{

	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */




/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */











#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )



/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */


/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{


    return yylineno;
}





/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}



/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}



/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}


/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}


/* %if-reentrant */
/* %endif */


/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{


    yylineno = _line_number;
}






/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}



void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}




int yyget_debug  (void)
{
        return yy_flex_debug;
}



void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */


    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;




    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;




/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */


/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;




    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;


    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */



/*
 * Internal utility routines.
 */



#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif



#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif



void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}



void *yyrealloc  (void * ptr, yy_size_t  size )
{

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}



void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}


/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */




/* %ok-for-header */



/**INDENT-ON**/
// clang-format on

// ****************************************************************************
Node *xfl::NewToken(const int TK, const char *text) const
{
   return NewNode(std::make_shared<Token>(TK, text));
}

// ****************************************************************************
static token_t token(xfl &ufl, Node **yylval, token_t TK, const char *tok,
                     const char *yytext, token_t /*updated*/)
{
   ufl.loc->step();
   const char *text = (TK == yy::parser::token::NL) ? "\\\\n" : yytext;
   *yylval = ufl.NewToken(TK, text);
   return TK;
}

// *****************************************************************************
static token_t block_comment(xfl &ufl)
{
   ufl.loc->step();
   char c, prev = 0, prev2 = 0;
   while ((c = yyinput()) != 0)
   {
      if (c == '\n')
      {
         ufl.loc->lines(1);
         continue;
      }
      if (c == '\"' && prev == '\"' && prev2 == '\"')
      {
         return TOK::EMPTY;
      }
      prev2 = prev;
      prev = c;
   }
   ufl.loc->step();
   return TOK::EMPTY;
}

// *****************************************************************************
static token_t line_token(xfl &ufl, Node **yylval, const char *yytext)
{
   return token(ufl, yylval, TOK::NL, "NL", yytext, line_comment(ufl));
}

// *****************************************************************************
static token_t line_comment(xfl &ufl)
{
   char c;
   while ((c = yyinput()) != 0)
   {
      if (c == '\n')
      {
         ufl.loc->lines(1);
         ufl.loc->step();
         return TOK::NL;
      }
   }
   ufl.loc->step();
   return TOK::NL;
}

// *****************************************************************************
static token_t new_line(xfl &ufl)
{
   assert(yytext[0] == '\\');
   assert(yytext[1] == '\n');
   ufl.loc->lines(1);
   ufl.loc->step();
   return TOK::EMPTY;
}

// *****************************************************************************
static token_t update(xfl &ufl)
{
   for (int i = 0; yytext[i] != '\0'; i++)
   {
      if (yytext[i] == '\n')
      {
         ufl.loc->lines(1);
      }
      else if (yytext[i] == '\t')
      {
         ufl.loc->columns(1);
      }
      else
      {
         ufl.loc->columns(1);
      }
   }
   ufl.loc->step();
   return TOK::EMPTY;
}

// *****************************************************************************
static void llerror(xfl &ufl, char const *msg)
{
   std::cerr << (*ufl.loc) << ": " << msg << std::endl;
   abort();
}

// *****************************************************************************
int xfl::open(void)
{
   yy_flex_debug = ll_debug;
   if (input.empty() || input == "-")
   {
      yyin = stdin;
   }
   else if (!(yyin = fopen(input.c_str(), "r")))
   {
      std::cerr << "cannot open " << input << ": " << strerror(errno) << '\n';
      return EXIT_FAILURE;
   }
   return EXIT_SUCCESS;
}

// *****************************************************************************
int xfl::close(void) { return fclose(yyin); }

